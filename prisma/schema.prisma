generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  role     String // 'Admin' or 'User'
}

// Student model
model Student {
  id          Int          @id @default(autoincrement())
  name        String
  admissionNo String       @unique
  paidFees    Float        @default(0)
  totalFees   Float        @default(0)
  balance     Float        @default(0)
  status      String       // 'Paid', 'Partially Paid', 'Unpaid'
  dateOfBirth DateTime?
  parentName  String?
  classId     Int?
  class       Class?       @relation(fields: [classId], references: [id])
  payments    Payment[]
  feePayments FeePayment[]
  receipt     Receipt[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?    // For soft delete
}

// Class model
model Class {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  students     Student[]
  feeStructure FeeStructure? // Relation to FeeStructure (defined on FeeStructure)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?     // For soft delete

  @@map("classes")
}

// Payment model
model Payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  paymentDate   DateTime
  paymentMethod String
  receiptNo     String   @unique
  studentId     Int
  student       Student  @relation(fields: [studentId], references: [id])
  createdAt     DateTime @default(now())
}

// Receipt model
model Receipt {
  id            Int          @id @default(autoincrement())
  studentId     Int
  student       Student      @relation(fields: [studentId], references: [id])
  totalAmount   Float
  paymentDate   DateTime
  paymentMethod String
  feePayments   FeePayment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// FeePayment model
model FeePayment {
  id          Int       @id @default(autoincrement())
  receiptId   Int
  receipt     Receipt   @relation(fields: [receiptId], references: [id])
  studentId   Int
  student     Student   @relation(fields: [studentId], references: [id])
  month       String
  amount      Float
  finalAmount Float     @default(0)
  discountId  Int?
  discount    Discount? @relation(fields: [discountId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Discount model
model Discount {
  id          Int          @id @default(autoincrement())
  type        String
  amount      Float
  description String
  condition   String?
  feePayments FeePayment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// FeeStructure model
model FeeStructure {
  id         Int      @id @default(autoincrement())
  classId    Int      @unique
  totalFees  Float    @default(0.0)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
  class      Class    @relation(fields: [classId], references: [id]) // Defined here only

  @@map("fee_structures")
}
