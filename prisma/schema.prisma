// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication (Admin)
model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  role     String // 'Admin' or 'User'
  //createdAt DateTime @default(now())
}

// Student model
model Student {
  id          Int          @id @default(autoincrement())
  name        String
  admissionNo String       @unique
  totalFees   Float
  paidFees    Float        @default(0)
  balance     Float        @default(0)
  status      String // 'Paid', 'Partially Paid', 'Unpaid'
  dateOfBirth DateTime? // Optional date of birth field
  parentName  String? // Optional parent name field
  classId     Int?
  class       Class?       @relation("ClassStudents", fields: [classId], references: [id])
  payments    Payment[]
  fees        Fee[]        @relation("StudentFees") // Add this relation
  feePayments FeePayment[]
  receipt     Receipt[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Fee model
model Fee {
  id        Int       @id @default(autoincrement())
  amount    Float
  feeType   String
  classId   Int?
  class     Class?    @relation(fields: [classId], references: [id])
  students  Student[] @relation("StudentFees") // Add this relation
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Class model
model Class {
  id        Int       @id @default(autoincrement())
  name      String
  students  Student[] @relation("ClassStudents")
  fees      Fee[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Payment model
model Payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  paymentDate   DateTime
  paymentMethod String
  receiptNo     String   @unique
  studentId     Int
  student       Student  @relation(fields: [studentId], references: [id])
  createdAt     DateTime @default(now())
}

model Receipt {
  id            Int          @id @default(autoincrement())
  studentId     Int // Reference to the Student
  student       Student      @relation(fields: [studentId], references: [id])
  totalAmount   Float // Total amount for this receipt
  paymentDate   DateTime // Date of payment
  paymentMethod String // e.g., Cash, Card, UPI
  feePayments   FeePayment[] // Associated monthly payments
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model FeePayment {
  id          Int       @id @default(autoincrement())
  receiptId   Int
  receipt     Receipt   @relation(fields: [receiptId], references: [id])
  studentId   Int
  student     Student   @relation(fields: [studentId], references: [id])
  month       String
  amount      Float
  finalAmount Float     @default(0)
  discountId  Int? // Foreign key for Discount
  discount    Discount? @relation(fields: [discountId], references: [id]) // Single Discount relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discount {
  id          Int          @id @default(autoincrement())
  type        String // 'flat', 'percentage'
  amount      Float // Discount amount or percentage
  description String // Reason for discount
  condition   String? // Optional condition for applying discount
  feePayments FeePayment[] // Bi-directional relation with FeePayment
  createdAt DateTime @default(now())
  updatedAt   DateTime  @updatedAt
}
